@page "/product/price/{Id:int}"
@inject IProductRepos _prodRepos
@inject IProductPriceRepos _prodPriceRepos
@inject NavigationManager _navManager

<div class="row my-2">
    <div class="col-md-10">
        <h3 class="card-title text-primary mb-3 ml-3">Price Management</h3>

        @if (IsLoading)
        {
            <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
                <img src="/images/loading.gif" alt="loading" />
            </div>
        }
        else
        {
            <div class="row p-2 mb-4">
                <div class="col-10">
                    <div class="card-body">
                        <h4>@Product.Name</h4>
                        <span>Category: @Product.Category.Name</span> <br />
                        Description : <span>@((MarkupString)Product.Description)</span>
                    </div>
                </div>
                <div class="col-2">
                    <img src="@Product.ImageUrl" class="w-100" />
                </div>
            </div>

            <RadzenDataGrid @ref="PricesGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="@editMode"
                Data="@ProductPrices" TItem="ProductPriceDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
                
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="New Price" 
                        Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && pricesToInsert.Count() > 0)" />
                </HeaderTemplate>

                <Columns>

                    <RadzenDataGridColumn Property="Id" Title="Id" Width="120px" Frozen="true" />
                    
                    
                    <RadzenDataGridColumn Property="Size" Title="Size" Width="280px">
                        <EditTemplate Context="Size">
                            <RadzenDropDown @bind-Value="Size" Data="@SizeList" TextProperty="@nameof(SizeList)" ValueProperty="@nameof(SizeList)" Style="width:100%; display: block;"
                                            InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select customer" }})" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="Price" Title="Price" Width="120px" />
                    
                    @* <RadzenDataGridColumn Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="order">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="order">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))" aria-label="Save">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(order))" aria-label="Cancel">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" aria-label="Delete">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn> *@
                
                </Columns>
            </RadzenDataGrid>
        }
    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    private ProductDTO Product { get; set; } = new();
    
    private IEnumerable<ProductPriceDTO> ProductPrices { get; set; } = new List<ProductPriceDTO>();
    
    private bool IsLoading { get; set; } = true;
    public RadzenDataGrid<ProductPriceDTO> PricesGrid;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<ProductPriceDTO> pricesToInsert = new List<ProductPriceDTO>();
    List<ProductPriceDTO> pricesToUpdate = new List<ProductPriceDTO>();

    IEnumerable<String> SizeList = new List<String>()
    {
        "Small","Medium","Large","8oz","16oz","24oz"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            Product = await _prodRepos.Get(Id);
            ProductPrices = await _prodPriceRepos.GetAll(Id);
            IsLoading = false;
            StateHasChanged();
        }
    }

    void Reset()
    {
        pricesToInsert.Clear();
        pricesToUpdate.Clear();
    }

    void Reset(ProductPriceDTO prodPrice)
    {
        pricesToInsert.Remove(prodPrice);
        pricesToUpdate.Remove(prodPrice);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Product = await _prodRepos.Get(Id);
        ProductPrices = await _prodPriceRepos.GetAll(Id);
    }

    async Task EditRow(ProductPriceDTO prodPrice)
    {
        if (!PricesGrid.IsValid) return;

        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        pricesToUpdate.Add(prodPrice);
        await PricesGrid.EditRow(prodPrice);
    }

    void OnUpdateRow(ProductPriceDTO prodPrice)
    {
        Reset(prodPrice);

         _prodPriceRepos.Update(prodPrice);
    }

    async Task SaveRow(ProductPriceDTO prodPrice)
    {
        await PricesGrid.UpdateRow(prodPrice);
    }

    void CancelEdit(ProductPriceDTO prodPrice)
    {
        Reset(prodPrice);

        PricesGrid.CancelEditRow(prodPrice);

        // var priceEntry = _prodPriceRepos.Entry(prodPrice);
        // if (priceEntry.State == EntityState.Modified)
        // {
        //     priceEntry.CurrentValues.SetValues(priceEntry.OriginalValues);
        //     priceEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(ProductPriceDTO prodPrice)
    {
        Reset(prodPrice);

        if (ProductPrices.Contains(prodPrice))
        {
            await _prodPriceRepos.Delete(prodPrice.Id);
            await PricesGrid.Reload();
        }
        else
        {
            PricesGrid.CancelEditRow(prodPrice);
            await PricesGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (!PricesGrid.IsValid) return;

        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var prodPrice = new ProductPriceDTO();
        pricesToInsert.Add(prodPrice);
        await PricesGrid.InsertRow(prodPrice);
    }

    void OnCreateRow(ProductPriceDTO prodPrice)
    {
        _prodPriceRepos.Create(prodPrice);

        pricesToInsert.Remove(prodPrice);
    }
}